import { TokenInfo as TokenInfo$1, TokenList } from '@uniswap/token-lists';
export { Tags, TokenList, Version } from '@uniswap/token-lists';

type SuperTokenExtensions = {
    readonly extensions: {
        readonly superTokenInfo: {
            readonly type: "Pure" | "Native Asset";
        } | {
            readonly type: "Wrapper";
            readonly underlyingTokenAddress: `0x${string}`;
        };
    };
};
interface TokenInfo extends Omit<TokenInfo$1, "address"> {
    readonly address: `0x${string}`;
}
type SuperTokenInfo = TokenInfo & SuperTokenExtensions;
type UnderlyingTokenInfo = TokenInfo;
type SuperTokenList = Omit<TokenList, "tokens"> & {
    readonly tokens: (SuperTokenInfo & UnderlyingTokenInfo)[];
};
declare const extendedSuperTokenList: SuperTokenList;
declare const superTokenList: SuperTokenList;
declare const fetchLatestSuperTokenList: () => Promise<SuperTokenList>;
declare const fetchLatestExtendedSuperTokenList: () => Promise<SuperTokenList>;

export { SuperTokenExtensions, SuperTokenInfo, SuperTokenList, TokenInfo, superTokenList as default, extendedSuperTokenList, fetchLatestExtendedSuperTokenList, fetchLatestSuperTokenList };
