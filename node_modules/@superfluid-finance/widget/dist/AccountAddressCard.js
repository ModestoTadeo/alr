import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import CheckIcon_ from "@mui/icons-material/Check.js";
import ContentCopyIcon_ from "@mui/icons-material/ContentCopy.js";
import { Avatar, IconButton, Paper, Stack, Typography, } from "@mui/material";
import { create } from "blockies-ts";
import { useCallback, useState } from "react";
import { AccountAddress } from "./AccountAddress.js";
import { normalizeIcon } from "./helpers/normalizeIcon.js";
import { copyToClipboard } from "./utils.js";
import { useWidget } from "./WidgetContext.js";
const ContentCopyIcon = normalizeIcon(ContentCopyIcon_);
const CheckIcon = normalizeIcon(CheckIcon_);
export function AccountAddressCard({ address, dataTest, PaperProps = { sx: {} }, }) {
    const blockiesSrc = create({
        seed: address.toLowerCase(),
    }).toDataURL();
    const [copied, setCopied] = useState(false);
    const { eventHandlers } = useWidget();
    const onCopyAddressButtonClick = useCallback(async (checksumAddress) => {
        eventHandlers.onButtonClick({
            type: "switch_network",
        });
        await copyToClipboard(checksumAddress);
        setCopied(true);
        const timeoutId = setTimeout(() => setCopied(false), 1000);
        return () => clearTimeout(timeoutId);
    }, [eventHandlers.onButtonClick]);
    return (_jsx(Paper, { ...PaperProps, sx: { px: 2.25, py: 1.75, borderRadius: 0.75, ...PaperProps.sx }, children: _jsx(AccountAddress, { address: address, children: ({ ensAvatarResult, ensNameResult, checksumAddress, shortenedAddress, }) => (_jsxs(Stack, { direction: "row", alignItems: "center", spacing: 1, children: [ensAvatarResult.data ? (_jsx(Avatar, { "data-testid": "ens-avatar", alt: "ENS avatar", variant: "rounded", src: ensAvatarResult.data, sx: { width: 24, height: 24 } })) : (_jsx(Avatar, { "data-testid": "blockie-avatar", alt: "generated blockie avatar", variant: "rounded", src: blockiesSrc, sx: { width: 24, height: 24 } })), _jsx(Typography, { "data-testid": `${dataTest}-address`, variant: "body1", title: checksumAddress, flex: 1, children: ensNameResult.data ?? shortenedAddress }), _jsx(IconButton, { "data-testid": `${dataTest}-copy-button`, size: "small", title: "Copy address to clipboard", onClick: () => onCopyAddressButtonClick(checksumAddress), sx: {
                            "&:hover": { color: (theme) => theme.palette.primary.main },
                        }, children: copied ? (_jsx(CheckIcon, { "data-testid": "check-icon", fontSize: "inherit", color: "primary" })) : (_jsx(ContentCopyIcon, { "data-testid": "copy-icon", fontSize: "inherit" })) })] })) }) }));
}
