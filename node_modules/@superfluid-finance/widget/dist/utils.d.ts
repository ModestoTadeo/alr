import { PropsWithChildren } from "react";
import { FlowRate, PersonalData, TimePeriod } from "./core/index.js";
export type ChildrenProp = PropsWithChildren["children"];
export declare const MaxUint256: bigint;
export declare function isDefined<T>(value: T | undefined | null): value is T;
export declare function useStateWithDep<T>(defaultValue: T): readonly [T, import("react").Dispatch<import("react").SetStateAction<T>>];
export declare function shortenHex(address: string, length?: number): string;
export declare function serializeRegExp(regex: RegExp): string;
export declare function deserializeRegExp(serialized: string): RegExp;
export declare function copyToClipboard(text: string): Promise<boolean | void>;
export declare const absoluteValue: (n: bigint) => bigint;
export declare function toFixedUsingString(numStr: string, decimalPlaces: number): string;
export declare function mapPersonalDataToObject(personalData: PersonalData): Record<string, string> | {
    data: {};
};
export declare function mapFlowRateToDefaultWrapAmount(defaultWrapAmount: {
    multiplier: number;
    period?: TimePeriod;
}, flowRate?: FlowRate): bigint;
/**
 * Combines members of an intersection into a readable type.
 *
 * @link https://twitter.com/mattpocockuk/status/1622730173446557697?s=20&t=NdpAcmEFXY01xkqU3KO0Mg
 * @example
 * type Result = Prettify<{ a: string } | { b: string } | { c: number, d: bigint }>
 * //   ^? type Result = { a: string; b: string; c: number; d: bigint }
 */
export type Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
export type { PersonalDataField, PersonalDataFieldType, } from "./PersonalDataFields.js";
export { EmailField, EmailWithAliasField, PhoneNumberField, } from "./PersonalDataFields.js";
export type Errors = Record<string, {
    success: boolean;
    message?: string;
}>;
//# sourceMappingURL=utils.d.ts.map