import { z } from "zod";
declare const superTokenExtensionSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"Wrapper">;
    underlyingTokenAddress: z.ZodEffects<z.ZodString, `0x${string}`, string>;
}, "strip", z.ZodTypeAny, {
    type: "Wrapper";
    underlyingTokenAddress: `0x${string}`;
}, {
    type: "Wrapper";
    underlyingTokenAddress: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"Pure">;
    underlyingTokenAddress: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "Pure";
    underlyingTokenAddress?: undefined;
}, {
    type: "Pure";
    underlyingTokenAddress?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"Native Asset">;
    underlyingTokenAddress: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "Native Asset";
    underlyingTokenAddress?: undefined;
}, {
    type: "Native Asset";
    underlyingTokenAddress?: undefined;
}>]>;
export type SuperTokenExtension = z.infer<typeof superTokenExtensionSchema>;
export {};
//# sourceMappingURL=TokenInfo.d.ts.map