import { z } from "zod";
export declare const personalDataInputSchema: z.ZodObject<{
    name: z.ZodString;
    label: z.ZodString;
    required: z.ZodOptional<z.ZodObject<{
        pattern: z.ZodEffects<z.ZodString, string, string>;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        pattern: string;
    }, {
        message: string;
        pattern: string;
    }>>;
    optional: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    disabled: z.ZodOptional<z.ZodBoolean>;
    size: z.ZodOptional<z.ZodDefault<z.ZodEnum<["half", "full"]>>>;
    value: z.ZodOptional<z.ZodDefault<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    label: string;
    value?: string | undefined;
    size?: "half" | "full" | undefined;
    required?: {
        message: string;
        pattern: string;
    } | undefined;
    optional?: boolean | undefined;
    disabled?: boolean | undefined;
}, {
    name: string;
    label: string;
    value?: string | undefined;
    size?: "half" | "full" | undefined;
    required?: {
        message: string;
        pattern: string;
    } | undefined;
    optional?: boolean | undefined;
    disabled?: boolean | undefined;
}>;
export declare const personalDataSchema: z.ZodArray<z.ZodObject<{
    name: z.ZodString;
    label: z.ZodString;
    required: z.ZodOptional<z.ZodObject<{
        pattern: z.ZodEffects<z.ZodString, string, string>;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        pattern: string;
    }, {
        message: string;
        pattern: string;
    }>>;
    optional: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    disabled: z.ZodOptional<z.ZodBoolean>;
    size: z.ZodOptional<z.ZodDefault<z.ZodEnum<["half", "full"]>>>;
    value: z.ZodOptional<z.ZodDefault<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    label: string;
    value?: string | undefined;
    size?: "half" | "full" | undefined;
    required?: {
        message: string;
        pattern: string;
    } | undefined;
    optional?: boolean | undefined;
    disabled?: boolean | undefined;
}, {
    name: string;
    label: string;
    value?: string | undefined;
    size?: "half" | "full" | undefined;
    required?: {
        message: string;
        pattern: string;
    } | undefined;
    optional?: boolean | undefined;
    disabled?: boolean | undefined;
}>, "many">;
export type PersonalDataInput = z.infer<typeof personalDataInputSchema>;
export interface PersonalData extends z.infer<typeof personalDataSchema> {
}
//# sourceMappingURL=PersonalData.d.ts.map