import { Command, EnableAutoWrapCommand, SubscribeCommand, WrapIntoSuperTokensCommand } from "./commands.js";
import { ContractWrite } from "./ContractWrite.js";
import { ModifyFlowRateBehaviour, TimePeriod } from "./core/index.js";
export type CommandMapperProps<TCommand extends Command = Command> = {
    command: TCommand;
    onMapped?: (result: {
        commandId: string;
        contractWrites: ReadonlyArray<ContractWrite>;
    }) => void;
};
export declare function CommandMapper({ command: cmd, ...props }: CommandMapperProps): import("react/jsx-runtime").JSX.Element;
export declare function EnableAutoWrapCommandMapper({ command: cmd, onMapped, }: CommandMapperProps<EnableAutoWrapCommand>): null;
export declare function WrapIntoSuperTokensCommandMapper({ command: cmd, onMapped, }: CommandMapperProps<WrapIntoSuperTokensCommand>): null;
export declare const calculateNewFlowRate: ({ existingFlowRateWei: existingFlowRate, paymentFlowRate, modifyBehaviour, }: {
    existingFlowRateWei: bigint;
    paymentFlowRate: {
        amountWei: bigint;
        period: TimePeriod;
    };
    modifyBehaviour: ModifyFlowRateBehaviour;
}) => bigint;
export declare function SubscribeCommandMapper({ command: cmd, onMapped, }: CommandMapperProps<SubscribeCommand>): null;
//# sourceMappingURL=CommandMapper.d.ts.map