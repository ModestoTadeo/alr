import { parseEther } from "viem";
import { z } from "zod";
import { addressSchema, etherAmountSchema, flowRateSchema, modifyFlowRateBehaviourSchema, paymentOptionSchema, supportedNetworkSchema, } from "./core/index.js";
import { personalDataSchema } from "./core/PersonalData.js";
const paymentOptionWithTokenInfoSchema = z.object({
    paymentOption: paymentOptionSchema,
    superToken: z.custom(),
    underlyingToken: z.custom().nullable(),
});
export const checkoutFormSchema = z.object({
    accountAddress: addressSchema,
    network: supportedNetworkSchema.transform((x) => x),
    paymentOptionWithTokenInfo: paymentOptionWithTokenInfoSchema,
    personalData: personalDataSchema,
    flowRate: flowRateSchema.refine((x) => parseEther(x.amountEther) > 0n, {
        message: "Flow rate must be greater than 0.",
    }),
    wrapAmountInUnits: etherAmountSchema.refine((x) => parseEther(x) >= 0n, {
        message: "Wrap amount can't be negative.",
    }),
    enableAutoWrap: z.boolean().optional(),
    modifyFlowRateBehaviour: modifyFlowRateBehaviourSchema,
});
