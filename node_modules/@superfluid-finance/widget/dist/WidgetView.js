import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import Close from "@mui/icons-material/Close.js";
import { AppBar, Container, Dialog, Drawer, IconButton, Toolbar, useTheme, } from "@mui/material";
import { useCallback, useMemo, useState } from "react";
import { CheckoutContent } from "./CheckoutContent.js";
import { normalizeIcon } from "./helpers/normalizeIcon.js";
import { useWidget } from "./WidgetContext.js";
const CloseIcon = normalizeIcon(Close);
export function WidgetView(props) {
    const theme = useTheme();
    const [isOpen, setOpen] = useState(false);
    const openModal = useCallback(() => setOpen(true), [setOpen]);
    const closeModal = useCallback(() => setOpen(false), [setOpen]);
    const viewState = useMemo(() => ({
        isOpen,
        openModal,
        closeModal,
    }), [isOpen, openModal, closeModal]);
    const { walletManager: { isOpen: isWalletManagerOpen }, } = useWidget();
    const modalProps = {
        open: isOpen && !isWalletManagerOpen,
        onClose: closeModal,
        keepMounted: isOpen,
    };
    const containerProps = {
        disableGutters: true,
    };
    switch (props.type) {
        case "dialog":
            return (_jsxs(_Fragment, { children: [props.children(viewState), _jsx(Dialog, { ...modalProps, sx: { borderRadius: theme.shape.borderRadius }, maxWidth: "lg", PaperProps: {
                            sx: {
                                mx: 2,
                                width: `min(558px, calc(100vw - ${theme.spacing(4)}))`,
                            },
                        }, children: _jsx(Container, { ...containerProps, children: _jsx(CheckoutContent, {}) }) })] }));
        case "drawer":
            return (_jsxs(_Fragment, { children: [props.children(viewState), _jsx(Drawer, { ...modalProps, PaperProps: {
                            sx: {
                                width: "min(558px, 100vw)",
                            },
                        }, anchor: "right", children: _jsx(Container, { ...containerProps, children: _jsx(CheckoutContent, {}) }) })] }));
        case "full-screen":
            return (_jsxs(_Fragment, { children: [props.children(viewState), _jsxs(Dialog, { ...modalProps, sx: { borderRadius: theme.shape.borderRadius }, fullScreen: true, children: [_jsx(AppBar, { sx: { position: "relative" }, children: _jsx(Toolbar, { children: _jsx(IconButton, { edge: "start", color: "inherit", onClick: closeModal, "aria-label": "close", children: _jsx(CloseIcon, {}) }) }) }), _jsx(Container, { ...containerProps, children: _jsx(CheckoutContent, {}) })] })] }));
        default:
            return (_jsx(Container, { ...containerProps, children: _jsx(CheckoutContent, {}) }));
    }
}
