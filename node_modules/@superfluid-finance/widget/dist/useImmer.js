import { freeze, produce } from "immer";
import { useCallback, useMemo, useReducer, useState } from "react";
export function useImmer(initialValue) {
    const [val, updateValue] = useState(() => freeze(typeof initialValue === "function" ? initialValue() : initialValue, true));
    return [
        val,
        useCallback((updater) => {
            if (typeof updater === "function")
                updateValue(produce(updater));
            else
                updateValue(freeze(updater));
        }, []),
    ];
}
export function useImmerReducer(reducer, initializerArg, initializer) {
    const cachedReducer = useMemo(() => produce(reducer), [reducer]);
    return useReducer(cachedReducer, initializerArg, initializer);
}
