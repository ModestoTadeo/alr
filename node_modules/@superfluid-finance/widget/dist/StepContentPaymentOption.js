import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Box, Collapse, Stack } from "@mui/material";
import { useCallback, useEffect, useState } from "react";
import { Controller, useFormContext } from "react-hook-form";
import { useAccount } from "wagmi";
import FlowRateInput from "./FlowRateInput.js";
import NetworkAutocomplete from "./NetworkAutocomplete.js";
import { useStepper } from "./StepperContext.js";
import { StepperCTAButton } from "./StepperCTAButton.js";
import TokenAutocomplete from "./TokenAutocomplete.js";
import { useWidget } from "./WidgetContext.js";
export default function StepContentPaymentOption({ stepIndex }) {
    const { watch, control, formState: { isValid, isValidating }, } = useFormContext();
    const [paymentOptionWithTokenInfo] = watch(["paymentOptionWithTokenInfo"]);
    const showCustomFlowRateInput = Boolean(paymentOptionWithTokenInfo &&
        paymentOptionWithTokenInfo.paymentOption.flowRate === undefined);
    const isStepComplete = isValid && !isValidating; // Might be better to solve with "getFieldState".
    const { isConnected, address } = useAccount();
    const [nextStepOnConnect, setNextOnConnect] = useState(false);
    const { handleNext } = useStepper();
    useEffect(() => {
        if (nextStepOnConnect && isConnected && isStepComplete) {
            setNextOnConnect(false);
            handleNext(stepIndex);
        }
    }, [handleNext, nextStepOnConnect, isConnected, isStepComplete, stepIndex]);
    const { walletManager: { open: openWalletManager }, eventHandlers, getNetwork, } = useWidget();
    useEffect(() => {
        eventHandlers.onRouteChange({
            route: "step_payment_option",
        });
    }, [eventHandlers.onRouteChange]);
    const onContinue = useCallback(() => {
        eventHandlers.onButtonClick({ type: "next_step" });
        handleNext(stepIndex);
    }, [handleNext, eventHandlers.onButtonClick]);
    return (_jsxs(Stack, { direction: "column", alignItems: "stretch", justifyContent: "space-around", spacing: 3, sx: { pb: 3, px: 3.5 }, children: [_jsxs(Box, { children: [_jsxs(Stack, { direction: "row", alignItems: "center", justifyContent: "space-between", spacing: 1, sx: { position: "relative" }, children: [_jsx(Box, { sx: { width: "100%" }, children: _jsx(NetworkAutocomplete, {}) }), _jsx(Box, { sx: { width: "100%" }, children: _jsx(TokenAutocomplete, {}) })] }), _jsx(Collapse, { in: showCustomFlowRateInput, appear: false, children: _jsx(Box, { sx: { pt: 2 }, children: _jsx(Controller, { control: control, name: "flowRate", render: ({ field: { value, onChange, onBlur } }) => (_jsx(FlowRateInput, { value: value, onChange: onChange, onBlur: onBlur })) }) }) })] }), !isConnected ? (_jsx(StepperCTAButton, { onClick: () => {
                    openWalletManager({
                        chain: paymentOptionWithTokenInfo?.paymentOption?.chainId
                            ? getNetwork(paymentOptionWithTokenInfo.paymentOption.chainId)
                            : undefined,
                    });
                    setNextOnConnect(true);
                    eventHandlers.onButtonClick({ type: "connect_wallet" });
                }, children: "Connect Wallet to Continue" })) : (_jsx(StepperCTAButton, { disabled: !isStepComplete, onClick: onContinue, children: "Continue" }))] }));
}
