import { castDraft } from "immer";
import { nanoid } from "nanoid";
import { useImmerReducer } from "./useImmer.js";
export const useCommandHandlerReducer = () => useImmerReducer((draft, action) => {
    switch (action.type) {
        case "reset": {
            draft.status = "idle";
            draft.commands = [];
            draft.sessionId = null;
            draft.writeIndex = 0;
            break;
        }
        case "set commands": {
            draft.status = "initialized";
            draft.commands = castDraft(action.payload);
            draft.sessionId = nanoid();
            draft.writeIndex = 0;
            break;
        }
        case "set contract writes": {
            const command = draft.commands.find((x) => x.id === action.payload.commandId);
            if (!command)
                throw new Error(`Command not found with ID: ${action.payload.commandId}`);
            command.contractWrites = castDraft(action.payload.contractWrites);
            draft.writeIndex = 0;
            break;
        }
        case "set write index": {
            draft.writeIndex = action.payload;
            break;
        }
        case "set contract write result": {
            const contractWrite = draft.commands
                .find((x) => x.id === action.payload.commandId)
                ?.contractWrites?.find((x) => x.id === action.payload.writeId);
            if (!contractWrite)
                throw new Error(`ContractWrite not found with ID: ${action.payload.commandId}.${action.payload.writeId}`);
            // Initialize session when first transaction invoked.
            // EDIT: Moved this to when commands are set.
            // if (
            //   !draft.sessionId &&
            //   !!action.payload.result.writeResult.data?.hash
            // ) {
            //   draft.sessionId = nanoid();
            // }
            contractWrite.result = castDraft(action.payload.result);
            break;
        }
    }
}, { status: "idle", commands: [], sessionId: null, writeIndex: 0 });
