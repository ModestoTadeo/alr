import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMemo } from "react";
import { FormProvider as RHFFormProvider, useForm } from "react-hook-form";
import { useNetwork } from "wagmi";
import { FormEffects } from "./FormEffects.js";
import { checkoutFormSchema, } from "./formValues.js";
import { mapFlowRateToDefaultWrapAmount } from "./utils.js";
import { useWidget } from "./WidgetContext.js";
export default function FormProvider({ children }) {
    const { chain } = useNetwork();
    const { networks, personalData, paymentOptionWithTokenInfoList } = useWidget();
    const defaultNetwork = useMemo(() => {
        if (networks.length === 1) {
            return networks[0];
        }
        return networks.find((network) => network.id === chain?.id) ?? null;
    }, [chain, networks]);
    const { paymentDetails } = useWidget();
    const defaultPaymentOption = useMemo(() => {
        if (!defaultNetwork) {
            return null;
        }
        const networkPaymentOptions = paymentOptionWithTokenInfoList.filter((x) => x.paymentOption.chainId === defaultNetwork.id);
        if (networkPaymentOptions.length === 1) {
            return networkPaymentOptions[0];
        }
        return null;
    }, [defaultNetwork, paymentOptionWithTokenInfoList]);
    const defaultValues = {
        accountAddress: null,
        network: defaultNetwork,
        paymentOptionWithTokenInfo: defaultPaymentOption,
        wrapAmountInUnits: defaultPaymentOption?.paymentOption?.flowRate
            ? `${Number(mapFlowRateToDefaultWrapAmount(paymentDetails.defaultWrapAmount, defaultPaymentOption.paymentOption.flowRate))}`
            : "0",
        enableAutoWrap: false,
        personalData,
        flowRate: defaultPaymentOption?.paymentOption?.flowRate ?? {
            amountEther: "0",
            period: "month",
        },
        modifyFlowRateBehaviour: paymentDetails.modifyFlowRateBehaviour,
    };
    const formMethods = useForm({
        defaultValues,
        resolver: zodResolver(checkoutFormSchema),
    });
    return (_jsxs(RHFFormProvider, { ...formMethods, children: [typeof children === "function" ? children(formMethods) : children, _jsx(FormEffects, {})] }));
}
