import { jsx as _jsx } from "react/jsx-runtime";
import { useCallback, useEffect, useState } from "react";
import { useFormContext } from "react-hook-form";
import { useAccount } from "wagmi";
import { useCommandHandler } from "./CommandHandlerContext.js";
import { formValuesToCommands } from "./formValuesToCommands.js";
import { StepperContext } from "./StepperContext.js";
import { useWidget } from "./WidgetContext.js";
export function StepperProvider({ children, totalSteps, walletConnectStep = 0, initialStep = 0, }) {
    const [activeStep, setActiveStep] = useState(initialStep);
    const { handleSubmit } = useFormContext();
    const { submitCommands } = useCommandHandler();
    const handleNext = useCallback((currentStep) => {
        const isStepBeforeReview = currentStep === totalSteps - 4;
        const nextActiveStep = Math.min(currentStep + 1, totalSteps - 1);
        if (isStepBeforeReview) {
            handleSubmit((formValues) => {
                submitCommands(formValuesToCommands(formValues));
                setActiveStep(nextActiveStep);
            })(); // Don't do anything when invalid.
        }
        else {
            setActiveStep(nextActiveStep);
        }
    }, [submitCommands, handleSubmit, totalSteps]);
    const handleBack = useCallback((currentStep) => {
        setActiveStep(Math.max(currentStep - 1, 0));
    }, []);
    const { isConnected } = useAccount();
    const isActiveStepGreaterThanWalletConnectStep = activeStep > walletConnectStep;
    useEffect(() => {
        if (!isConnected && isActiveStepGreaterThanWalletConnectStep) {
            setActiveStep(walletConnectStep);
        }
    }, [walletConnectStep, isConnected]);
    const { stepper: { orientation }, } = useWidget();
    const contextValue = {
        activeStep: isConnected || !isActiveStepGreaterThanWalletConnectStep
            ? activeStep
            : walletConnectStep,
        setActiveStep,
        handleNext,
        handleBack,
        totalSteps,
        orientation,
    };
    return (_jsx(StepperContext.Provider, { value: contextValue, children: children(contextValue) }));
}
