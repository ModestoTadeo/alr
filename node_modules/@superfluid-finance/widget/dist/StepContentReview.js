import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Alert, Collapse, Divider, Stack } from "@mui/material";
import { Fragment, useCallback, useEffect } from "react";
import { useQuery } from "wagmi";
import { useCommandHandler } from "./CommandHandlerContext.js";
import { CommandPreview } from "./previews/CommandPreview.js";
import { useStepper } from "./StepperContext.js";
import { StepperCTAButton } from "./StepperCTAButton.js";
import { useCommandValidationSchema } from "./useCommandValidationSchema.js";
import { useWidget } from "./WidgetContext.js";
export default function StepContentReview({ stepIndex }) {
    const { commands, contractWrites, sessionId } = useCommandHandler();
    const { handleNext } = useStepper();
    const { eventHandlers } = useWidget();
    useEffect(() => {
        eventHandlers.onRouteChange({ route: "step_review" });
    }, [eventHandlers.onRouteChange]);
    const onContinue = useCallback(() => {
        eventHandlers.onButtonClick({ type: "next_step" });
        handleNext(stepIndex);
    }, [handleNext, eventHandlers.onButtonClick, stepIndex]);
    const commandValidationSchema = useCommandValidationSchema();
    const { isFetching: isValidating, data: validationResult } = useQuery([sessionId], async () => await commandValidationSchema.safeParseAsync({
        wrapIntoSuperTokensCommand: commands.find((x) => x.type === "Wrap into Super Tokens"),
        subscribeCommand: commands.find((x) => x.type === "Subscribe"),
    }));
    const areContractWritesMapping = !commands.every((x) => x.contractWrites);
    const isValidationError = validationResult?.success === false;
    const isValid = !isValidationError;
    const validationMessage = isValidationError
        ? validationResult.error.issues[0].message
        : "";
    return (_jsxs(Stack, { sx: { pb: 3, px: 3.5 }, spacing: 3, children: [_jsx(Stack, { direction: "column", spacing: 3, children: commands.map((cmd, index) => (_jsxs(Fragment, { children: [index > 0 && _jsx(Divider, {}), _jsx(CommandPreview, { command: cmd })] }, cmd.id))) }), _jsxs(Stack, { direction: "column", spacing: 1, children: [_jsx(Collapse, { in: isValidationError, unmountOnExit: true, children: _jsx(Alert, { variant: "standard", "data-testid": "review-error", severity: "error", children: validationMessage }) }), _jsx(StepperCTAButton, { loadingPosition: "end", loading: isValidating || areContractWritesMapping, disabled: !isValid, onClick: onContinue, children: isValidating
                            ? "Validating..."
                            : areContractWritesMapping
                                ? "Preparing transactions..."
                                : "Continue" })] })] }));
}
